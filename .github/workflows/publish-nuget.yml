
name: Publish to Nuget

on:
  push:
    tags: 
      - "*"
    # branches: 
    #   - "main"
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build and deploy to NuGet
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v5

      - name: List files (for debugging)
        run: ls -R

      - name: Define version
        id: version_definition
        run: |
          echo "The tag name is ${{ github.ref_name }}"
          $regex = '^(?<majorVersion>\d+)(?:\.(?<minorVersion>\d+))?(?:\.(?<patchVersion>\d+))?(?:-(?<preReleaseTag>[a-zA-Z]+)(?:\.(?<preReleaseVersion>\d+))?)?$'
          if ("${{ github.ref_name }}" -notmatch $regex) {
            Write-Host "Tag ${{ github.ref_name }} does not match regex."
            exit 1
          }
          $major = $matches.majorVersion
          $minor = $matches.minorVersion ? $matches.minorVersion : 0
          $patch = $matches.patchVersion ? $matches.patchVersion : 0
          $ProductVersion = "${{ github.ref_name }}"
          $AssemblyVersion = "$major.$minor.$patch"
          # Write-Host "##[set-output name=AssemblyVersion;]$AssemblyVersion"
          Write-Host "Product version is $ProductVersion, assembly version is $AssemblyVersion"
          "product_version=$ProductVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
          "assembly_version=$AssemblyVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8

      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the project
        run: |
          $ProductVersion = "${{ steps.version_definition.outputs.product_version }}"
          $AssemblyVersion = "${{ steps.version_definition.outputs.assembly_version }}"
          Write-Host "FROM PREVIOUS STEP: Product version is $ProductVersion, assembly version is $AssemblyVersion"
          dotnet build --configuration Release --no-restore -p:Version="$ProductVersion" -p:AssemblyVersion="$AssemblyVersion"

      - name: Generate the nuget package
        run: |
          $ProductVersion = "${{ steps.version_definition.outputs.product_version }}"
          $AssemblyVersion = "${{ steps.version_definition.outputs.assembly_version }}"
          Write-Host "FROM PREVIOUS STEP: Product version is $ProductVersion, assembly version is $AssemblyVersion"
          dotnet pack --configuration Release --no-build --output ./dist -p:PackageVersion="$ProductVersion"

      - name: Push to NuGet
        if: vars.PUBLISH_TO_NUGET_ORG == 'true'
        run: |
          dotnet nuget push "./dist/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: dist/

      - name: List files (for debugging)
        run: ls -R
